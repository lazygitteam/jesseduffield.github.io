{"version":3,"sources":["webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridColumn.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/GridRow.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Grid/Grid.js","webpack:///./src/pages/404.tsx"],"names":["GridColumn","props","children","className","computer","color","floated","largeScreen","mobile","only","stretched","tablet","textAlign","verticalAlign","widescreen","width","classes","classnames_default","Object","classNameBuilders","rest","getUnhandledProps","ElementType","getElementType","react_default","a","createElement","extends_default","handledProps","propTypes","create","factories","Grid_GridColumn","GridRow","centered","columns","divided","reversed","Grid_GridRow","Grid","celled","container","doubling","inverted","padded","relaxed","stackable","Column","Row","Grid_Grid","NotFoundPage","react","style","minHeight","Icon","name","size","Header","as"],"mappings":"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","file":"component---src-pages-404-tsx-c15fff5c4f01a4cde1bf.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, createShorthandFactory, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useValueAndKey, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A column sub-component for Grid.\n */\n\nfunction GridColumn(props) {\n  var children = props.children,\n      className = props.className,\n      computer = props.computer,\n      color = props.color,\n      floated = props.floated,\n      largeScreen = props.largeScreen,\n      mobile = props.mobile,\n      only = props.only,\n      stretched = props.stretched,\n      tablet = props.tablet,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      widescreen = props.widescreen,\n      width = props.width;\n  var classes = cx(color, useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), useVerticalAlignProp(verticalAlign), useWidthProp(computer, 'wide computer'), useWidthProp(largeScreen, 'wide large screen'), useWidthProp(mobile, 'wide mobile'), useWidthProp(tablet, 'wide tablet'), useWidthProp(widescreen, 'wide widescreen'), useWidthProp(width, 'wide'), 'column', className);\n  var rest = getUnhandledProps(GridColumn, props);\n  var ElementType = getElementType(GridColumn, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridColumn.handledProps = [\"as\", \"children\", \"className\", \"color\", \"computer\", \"floated\", \"largeScreen\", \"mobile\", \"only\", \"stretched\", \"tablet\", \"textAlign\", \"verticalAlign\", \"widescreen\", \"width\"];\nGridColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid column can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A column can specify a width for a computer. */\n  computer: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A column can sit flush against the left or right edge of a row. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A column can specify a width for a large screen device. */\n  largeScreen: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A column can specify a width for a mobile device. */\n  mobile: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A column can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A column can stretch its contents to take up the entire grid or row height. */\n  stretched: PropTypes.bool,\n\n  /** A column can specify a width for a tablet device. */\n  tablet: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A column can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A column can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A column can specify a width for a wide screen device. */\n  widescreen: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** Represents width of column. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nGridColumn.create = createShorthandFactory(GridColumn, function (children) {\n  return {\n    children: children\n  };\n});\nexport default GridColumn;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\n/**\n * A row sub-component for Grid.\n */\n\nfunction GridRow(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      color = props.color,\n      columns = props.columns,\n      divided = props.divided,\n      only = props.only,\n      reversed = props.reversed,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx(color, useKeyOnly(centered, 'centered'), useKeyOnly(divided, 'divided'), useKeyOnly(stretched, 'stretched'), useMultipleProp(only, 'only'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'row', className);\n  var rest = getUnhandledProps(GridRow, props);\n  var ElementType = getElementType(GridRow, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGridRow.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"columns\", \"divided\", \"only\", \"reversed\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGridRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A row can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A grid row can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Represents column count per line in Row. */\n  columns: PropTypes.oneOf(_toConsumableArray(SUI.WIDTHS).concat(['equal'])),\n\n  /** A row can have dividers between its columns. */\n  divided: PropTypes.bool,\n\n  /** A row can appear only for a specific device, or screen sizes. */\n  only: customPropTypes.multipleProp(SUI.VISIBILITY),\n\n  /** A row can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A row can stretch its contents to take up the entire column height. */\n  stretched: PropTypes.bool,\n\n  /** A row can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A row can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default GridRow;","import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport GridColumn from './GridColumn';\nimport GridRow from './GridRow';\n/**\n * A grid is used to harmonize negative space in a layout.\n */\n\nfunction Grid(props) {\n  var celled = props.celled,\n      centered = props.centered,\n      children = props.children,\n      className = props.className,\n      columns = props.columns,\n      container = props.container,\n      divided = props.divided,\n      doubling = props.doubling,\n      inverted = props.inverted,\n      padded = props.padded,\n      relaxed = props.relaxed,\n      reversed = props.reversed,\n      stackable = props.stackable,\n      stretched = props.stretched,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(container, 'container'), useKeyOnly(doubling, 'doubling'), useKeyOnly(inverted, 'inverted'), useKeyOnly(stackable, 'stackable'), useKeyOnly(stretched, 'stretched'), useKeyOrValueAndKey(celled, 'celled'), useKeyOrValueAndKey(divided, 'divided'), useKeyOrValueAndKey(padded, 'padded'), useKeyOrValueAndKey(relaxed, 'relaxed'), useMultipleProp(reversed, 'reversed'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column', true), 'grid', className);\n  var rest = getUnhandledProps(Grid, props);\n  var ElementType = getElementType(Grid, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nGrid.handledProps = [\"as\", \"celled\", \"centered\", \"children\", \"className\", \"columns\", \"container\", \"divided\", \"doubling\", \"inverted\", \"padded\", \"relaxed\", \"reversed\", \"stackable\", \"stretched\", \"textAlign\", \"verticalAlign\"];\nGrid.Column = GridColumn;\nGrid.Row = GridRow;\nGrid.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A grid can have rows divided into cells. */\n  celled: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['internally'])]),\n\n  /** A grid can have its columns centered. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Represents column count per row in Grid. */\n  columns: PropTypes.oneOf(_toConsumableArray(SUI.WIDTHS).concat(['equal'])),\n\n  /** A grid can be combined with a container to use the available layout and alignment. */\n  container: PropTypes.bool,\n\n  /** A grid can have dividers between its columns. */\n  divided: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['vertically'])]),\n\n  /** A grid can double its column width on tablet and mobile sizes. */\n  doubling: PropTypes.bool,\n\n  /** A grid's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A grid can preserve its vertical and horizontal gutters on first and last columns. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['horizontally', 'vertically'])]),\n\n  /** A grid can increase its gutters to allow for more negative space. */\n  relaxed: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A grid can specify that its columns should reverse order at different device sizes. */\n  reversed: customPropTypes.multipleProp(['computer', 'computer vertically', 'mobile', 'mobile vertically', 'tablet', 'tablet vertically']),\n\n  /** A grid can have its columns stack on-top of each other after reaching mobile breakpoints. */\n  stackable: PropTypes.bool,\n\n  /** A grid can stretch its contents to take up the entire grid height. */\n  stretched: PropTypes.bool,\n\n  /** A grid can specify its text alignment. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS),\n\n  /** A grid can specify its vertical alignment to have all its columns vertically centered. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nexport default Grid;","import * as React from \"react\"\nimport { Header, Icon, Grid } from \"semantic-ui-react\"\n\nconst NotFoundPage = () => (\n  <Grid\n    centered\n    verticalAlign=\"middle\"\n    style={{\n      minHeight: \"700px\",\n    }}\n  >\n    <Grid.Column>\n      <Grid.Row style={{ textAlign: \"center\" }}>\n        <Icon name=\"marker\" size=\"huge\" />\n        <Header as=\"h1\">You are here!</Header>\n        <Header as=\"h2\">But nothing found for you #404</Header>\n      </Grid.Row>\n    </Grid.Column>\n  </Grid>\n)\n\nexport default NotFoundPage\n"],"sourceRoot":""}